{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":""},{"location":"#why","title":"Why","text":"<ol> <li>Documentation is useful; documentation with broken relative links is less so.</li> <li><code>mkdocs build --strict</code> is too strict, can not check files outside of <code>docs/</code> directory.</li> <li>Other existing tools I found were too slow, taking up to 10 seconds. This tool typically runs in milliseconds:</li> </ol> <pre><code>$ hyperfine \"relcheck all\"\nBenchmark 1: relcheck all\n  Time (mean \u00b1 \u03c3):       7.2 ms \u00b1   0.5 ms    [User: 3.8 ms, System: 3.2 ms]\n  Range (min \u2026 max):     6.5 ms \u2026   9.7 ms    286 runs\n</code></pre>"},{"location":"#installation","title":"Installation","text":"<pre><code>brew install anttiharju/tap/relcheck\n</code></pre> <p>Or download a binary from a GitHub release.</p>"},{"location":"#updating","title":"Updating","text":"<pre><code>brew update &amp;&amp; brew upgrade relcheck\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p>Using defaults inside a Git repository</p> <pre><code>relcheck all\n</code></pre> <p>for advanced usage, refer to the printed out info from</p> <pre><code>relcheck\n</code></pre> <p>Although the recommendation is to setup a integration via Lefthook or GitHub Actions instead of manual use.</p>"},{"location":"#integrations","title":"Integrations","text":""},{"location":"#vs-code","title":"VS Code","text":"<p>The reported broken links such as <code>dist/brew/README.md:5:19</code> are clickable in the intergrated terminal when holding ctrl/cmd. It will bring you right to where the ^ indicator points:</p> <pre><code>$\u00a0relcheck all\ndist/brew/README.md:5:19: broken relative link (file not found):\n- [`values.bash`](./values.sh) is required by the [render-template](https://github.com/anttiharju/actions/tree/v1/render-template) action.\n                  ^\n</code></pre> <p>The <code>file:line:column</code> link syntax is the same one that golangci-lint uses.</p>"},{"location":"#git-pre-commit-hook-via-lefthook","title":"Git pre-commit hook (via Lefthook)","text":"<p>Lefthook is an awesome Git hooks manager, enabling shift-left testing that improves developer experience. <code>relcheck</code> was built for usage with Lefthook. Here is a minimal <code>lefthook.yml</code> example:</p> <pre><code>output:\n  - success\n  - failure\n\npre-commit:\n  parallel: true\n  jobs:\n    # Install from https://github.com/anttiharju/relcheck\n    - name: relcheck\n      run: relcheck all\n</code></pre>"},{"location":"#github-actions","title":"GitHub Actions","text":"<p>A composite action is available through my actions monorepo. Here is a minimal <code>.github/workflows/build.yml</code> example:</p> <pre><code>name: Build\non:\n  push:\n    branches:\n      - main\n  pull_request:\n\njobs:\n  validate:\n    name: Validate\n    runs-on: ubuntu-24.04\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n\n      - name: relcheck\n        uses: anttiharju/actions/relcheck@v0\n</code></pre>"},{"location":"#stargazers-over-time","title":"Stargazers over time","text":""},{"location":"#why_1","title":"Why","text":"<p>This tool was developed alongside and mainly for https://github.com/anttiharju/vmatch. Idea is to have <code>vmatch</code> to be as linted as possible to make maintaining the project a breeze. Additionally the tooling built to support it will make my future projects easier to work on, allowing me to mostly focus on functionality without existing things breaking while I refactor the projects to my will.</p>"},{"location":"comment-trick-explained/","title":"Comment trick","text":""},{"location":"comment-trick-explained/#tldr","title":"TL;DR","text":"<p>For a reason a relative link has to be an URL instead and someone decided to introduce static checking by burying the relative link into a comment somewhere nearby the URL actually used in the docs, for example like this:</p> <p>../tests/README.md</p> <pre><code>&lt;!--[../tests/README.md](../tests/README.md) https://anttiharju.dev/relcheck/comment-trick-explained --&gt;\n\nMkDocs disallows relative links outside of the docs directory, so here's a GitHub one instead: https://github.com/anttiharju/relcheck/blob/HEAD/tests/README.md\n</code></pre>"},{"location":"comment-trick-explained/#problem","title":"Problem","text":"<p>If you build your documentation site with MkDocs (which, btw, if you use Backstage, you do) you may have found out that making relative links out of the <code>docs/</code> directory do not work on the final site. <code>mkdocs build --strict</code> displays a <code>WARNING</code> about this:</p> <pre><code>$\u00a0mkdocs build --strict\nINFO    -  Cleaning site directory\nINFO    -  Building documentation to directory: /Users/antti/anttiharju/relcheck/site\nWARNING -  Doc file 'comment-trick-explained.md' contains a link '../tests/README.md', but the target is not found among documentation files.\n\nAborted with 1 warnings in strict mode!\n</code></pre> <p>So as a workaround you can link to your GitHub-hosted Markdown file like this: tests/README.md and <code>mkdocs build --strict</code> is happy again, yay!</p> <pre><code>$ mkdocs build --strict\nINFO    -  Cleaning site directory\nINFO    -  Building documentation to directory: /Users/antti/anttiharju/relcheck/site\nINFO    -  Documentation built in 0.14 seconds\n</code></pre> <p>But by opting for the GitHub link you have the static checking offered by <code>relcheck</code>, <code>:(</code>.</p>"},{"location":"comment-trick-explained/#solution-workaround","title":"Solution (workaround)","text":"<p>Add the relative link within a comment. This way you still get a tripwire for refactors and MkDocs remains happy.</p> <pre><code>&lt;!--[../tests/README.md](../tests/README.md) https://anttiharju.dev/relcheck/comment-trick-explained --&gt;\n</code></pre>"},{"location":"examples/issues%20caught/","title":"Issues caught","text":""},{"location":"examples/issues%20caught/#preface","title":"Preface","text":"<p>This tool ignores .markdown files by default, so you can still retain syntax highlighting in your editor and demonstrate issues caught by the tool in real markdown.</p> <p>If you want to use file extensions other than <code>.md</code>, you can feed any desired files to the tool with a command such as</p> <pre><code>relcheck --verbose $(git ls-files '*.markdown')\n</code></pre> <p>although be aware that ShellCheck will complain of such use. There's a way to do it in a compliant way, but it won't be a neat oneliner. Also files with spaces won't work with the above approach, as ShellCheck correctly points out with SC2046. ShellCheck is awesome.</p>"},{"location":"examples/issues%20caught/#links","title":"Links","text":"<p>Broken links, such as typos are caught ../REDME.md.</p>"},{"location":"examples/issues%20caught/#anchors","title":"Anchors","text":"<ol> <li>Similarly non-existent anchors are also caught README.md#gitlab-actions</li> <li>Non-existent \"duplicate\" (triplicate?) anchors are also caught Introduction#why-2</li> </ol>"},{"location":"examples/issues%20caught/#directory-anchors","title":"Directory anchors","text":"<p>Referring to anchors in a directory is not valid. Therefore the tool tells you that for for example the following links:</p> <p>../#why.</p> <p>..#why-1.</p>"},{"location":"examples/valid-use/","title":"Valid use","text":"<p>This document demonstrates valid use of relative links within markdown as recognized by the <code>relcheck</code> tool.</p>"},{"location":"examples/valid-use/#links","title":"Links","text":"<ol> <li>Simple relative links are recognised Valid use</li> <li>and so are links that traverse upwards Introduction</li> <li>even files with spaces in their name are supported! See Issues caught</li> </ol>"},{"location":"examples/valid-use/#with-line-specified","title":"With line specified","text":"<p>like this</p>"},{"location":"examples/valid-use/#anchors","title":"Anchors","text":"<ol> <li>Anchors can be validated Introduction#why</li> <li>Even duplicate anchors are supported! Introduction#why-1</li> </ol>"},{"location":"examples/valid-use/#code-blocks","title":"Code blocks","text":"<p>Markdown links within code blocks are ignored so because they would not be clickable in the rendered document anyway:</p> <pre><code>[nonexistent](./non.md#existent)\n</code></pre> <p><code>also doesn't get confused by exotic formatting like this one</code></p>"},{"location":"examples/valid-use/#nut_and_bolt-emojis","title":"::nut_and_bolt:: Emojis","text":"<p>Like the one above</p>"},{"location":"examples/valid-use/#static-check-all-the-things","title":"Static check all the things","text":"<p>We can even setup static checking for relative links that we want to have as URLs for whatever reason. Simply add a comment like</p> <pre><code>&lt;!--[README](./README.md) https://anttiharju.dev/relcheck/comment-trick-explained --&gt;\n</code></pre>"},{"location":"examples/valid-use/#image-links","title":"Image links","text":"<p>alongside the URL to have the tool detect if the file gets moved in the repo. This makes refactoring project structure a lot less error-prone. Read more about this trick at https://anttiharju.dev/relcheck/comment-trick-explained</p>"},{"location":"examples/valid-use/#also-with-single-quotes-alt-text","title":"Also with single quotes alt text","text":""},{"location":"examples/valid-use/#alternative-headings","title":"Alternative headings","text":"<p>alternative headings</p>"},{"location":"examples/valid-use/#alternative-headings-with-equal-sign","title":"Alternative headings with equal sign","text":"<p>alternative headings</p>"},{"location":"examples/valid-use/#l-starting-headings","title":"L-starting headings","text":"<p>l-starting headings</p>"},{"location":"examples/valid-use/#headings-that-are-links-are-also-ok","title":"Headings that are links are also ok","text":"<p>Easy peasy</p>"},{"location":"examples/%F0%9F%97%92%EF%B8%8F/","title":"Files with emojis in their name","text":"<p>This is also supported.</p>"}]}